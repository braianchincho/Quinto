/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FiltrosGUI.java
 *
 * Created on 05-feb-2013, 0:27:55
 */

package intartificial;

import java.awt.Font;
import java.util.ArrayList;
import java.awt.Frame;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;


/**on1
 *
 * @author Ani Rufinetto
 */
public class HistogramaGUI extends javax.swing.JDialog {
   private int[] res;
   private float[] niveles;
    /** Creates new form FiltrosGUI */
    public HistogramaGUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.parent=parent;
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Histograma");
        this.buttonGroup1.add(radioButtonGenerar);
        this.buttonGroup1.add(radioButtonIngresar);
        radioButtonGenerar.setToolTipText("El tamaño de la imagen será 12X6");
        radioButtonIngresar.setToolTipText("El tamaño de la imagen puede ser menos a 12x6, si ingresa menos números");
        Font font=new Font("Century Gothic", Font.PLAIN, 11);
        this.tableImagen.getTableHeader().setFont(font);
        this.tableImagenFiltrada.getTableHeader().setFont(font);
        //JScrollPane scrollPane = new JScrollPane(tableImagenFiltrada);
       // tableImagenFiltrada.setFillsViewportHeight(false);
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
tcr.setHorizontalAlignment(SwingConstants.CENTER);
tableImagenFiltrada.getColumnModel().getColumn(0).setCellRenderer(tcr);
tableImagenFiltrada.getColumnModel().getColumn(1).setCellRenderer(tcr);
tableImagenFiltrada.getColumnModel().getColumn(2).setCellRenderer(tcr);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        radioButtonGenerar = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        comboHasta = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableImagen = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        radioButtonIngresar = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableImagenFiltrada = new javax.swing.JTable();
        btnVolver = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnEcualizar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setEnabled(false);

        radioButtonGenerar.setFont(new java.awt.Font("Century Gothic", 0, 11));
        radioButtonGenerar.setText("Generar Imagen");
        radioButtonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonGenerarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 11));
        jLabel2.setText("Niveles de grises de 0 a:");

        comboHasta.setFont(new java.awt.Font("Century Gothic", 0, 11));
        comboHasta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16" }));
        comboHasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboHastaActionPerformed(evt);
            }
        });

        tableImagen.setFont(new java.awt.Font("Century Gothic", 0, 11));
        tableImagen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableImagen.getTableHeader().setReorderingAllowed(false);
        tableImagen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableImagenKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableImagen);

        jButton1.setFont(new java.awt.Font("Century Gothic", 0, 11));
        jButton1.setText("Generar Tabla de Histograma");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        radioButtonIngresar.setFont(new java.awt.Font("Century Gothic", 0, 11));
        radioButtonIngresar.setText("Ingresar Imagen");
        radioButtonIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonIngresarActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14));
        jLabel4.setText("Resultados");

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 12));
        jLabel9.setText("Histograma de la imagen:");

        tableImagenFiltrada.setFont(new java.awt.Font("Century Gothic", 0, 11));
        tableImagenFiltrada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {new Integer(0), null, null},
                {new Integer(1), null, null},
                {new Integer(2), null, null},
                {new Integer(3), null, null},
                {new Integer(4), null, null},
                {new Integer(5), null, null},
                {new Integer(6), null, null},
                {new Integer(7), null, null},
                {new Integer(8), null, null},
                {new Integer(9), null, null},
                {new Integer(10), null, null},
                {new Integer(11), null, null},
                {new Integer(12), null, null},
                {new Integer(13), null, null},
                {new Integer(14), null, null},
                {new Integer(15), null, null},
                {new Integer(16), null, null}
            },
            new String [] {
                "Nivel", "Frecuencia", "Frecuencia Relativa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableImagenFiltrada.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableImagenFiltrada);
        tableImagenFiltrada.getColumnModel().getColumn(0).setResizable(false);
        tableImagenFiltrada.getColumnModel().getColumn(1).setResizable(false);
        tableImagenFiltrada.getColumnModel().getColumn(2).setResizable(false);

        btnVolver.setFont(new java.awt.Font("Century Gothic", 0, 11));
        btnVolver.setText("Reiniciar");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Century Gothic", 0, 11));
        jButton2.setText("Ver Gráfico");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnEcualizar.setFont(new java.awt.Font("Century Gothic", 0, 11));
        btnEcualizar.setText("Ecualizar");
        btnEcualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEcualizarActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 10));
        jLabel11.setText("(Se completará todo  el tamaño de ventana)");

        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 12));
        jLabel12.setText("Imagen: ventana 12x6");

        jLabel13.setFont(new java.awt.Font("Century Gothic", 0, 10));
        jLabel13.setText("(No es necesario completar todo el tamaño de ventana)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(305, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(252, 252, 252))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnVolver, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEcualizar))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jButton1)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))))
                .addContainerGap(118, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap(196, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(103, 103, 103)
                            .addComponent(radioButtonGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(90, 90, 90)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(radioButtonIngresar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(152, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioButtonIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioButtonGenerar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addComponent(jLabel12)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(20, 20, 20)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(btnEcualizar))
                .addGap(18, 18, 18)
                .addComponent(btnVolver))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboHastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboHastaActionPerformed
        // TODO add your handling code here:

        selectionColumn=Integer.parseInt(comboHasta.getSelectedItem().toString());
        tableImagen.clearSelection();
        tableImagenFiltrada.clearSelection();
       nivelHasta=selectionColumn;
       comboHasta.setEnabled(false);

    }//GEN-LAST:event_comboHastaActionPerformed

    private void tableImagenKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableImagenKeyReleased
        // TODO add your handling code here:
            genero=true;
        for(int i=0;i<=tableImagen.getSelectedRow();i++) {
            for(int j=0;j<=tableImagen.getSelectedColumn();j++) {

                Object x=tableImagen.getValueAt(i,j);
                if(x!=null)
                {
              int x1=Integer.parseInt(x.toString());

                //int caracter = evt.getKeyChar();

                if(x1 > nivelHasta){
                    
                        //evt.consume();
                    tableImagen.setValueAt(null, i, j);
                        //int cancelado=JOptionPane.showConfirmDialog(parent, "El valor fue eliminado debido a que es superior al nivel hasta.","Aviso",JOptionPane.OK_OPTION);
                        JOptionPane.showMessageDialog(parent, "El valor fue eliminado debido a que es superior al nivel hasta.");

                       // if(JOptionPane.OK_OPTION==cancelado)
                         {return;}
                }
                }
      /* if(valorSuperior(x1,nivelHasta))
            {
           tableImagen.setValueAt("", i, j);
            /*  int cancelado=JOptionPane.showConfirmDialog(parent, "No existen valores en todos los niveles. Desea continuar?","Aviso",JOptionPane.OK_CANCEL_OPTION);
              if(JOptionPane.CANCEL_OPTION==cancelado)
              {return;}*/

               // }

                }

        }
}//GEN-LAST:event_tableImagenKeyReleased

    private boolean existeNivelSinValor(int[] ima)
    {

    for(int i=0;i<ima.length;i++)
       {
        if(ima[i]==0)
        {return true;}

       }
    return false;
    }

 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here
       /*nivelDesde=Integer.parseInt(comboDesde.getSelectedItem().toString());*/ nivelHasta=Integer.parseInt(comboHasta.getSelectedItem().toString());

       if(genero)
       {
           this.radioButtonGenerar.setEnabled(false);
           this.radioButtonIngresar.setEnabled(false);
           nivelDesde = 0;
        cargarPorcionImagen();
       res=his.calcularHistograma(porcionImagen, nivelDesde, nivelHasta);
               if(existeNivelSinValor(res))
               {

              int cancel=JOptionPane.showConfirmDialog(parent, "No existen valores en todos los niveles. Desea continuar?","Mensaje",JOptionPane.OK_CANCEL_OPTION);
              if(JOptionPane.CANCEL_OPTION==cancel)
              {return;}
                 }





       frecuencias=new float[res.length];
      
      float z=0;
       for(int i=0;i<17;i++)
       {
         if(i>=nivelDesde && i<=nivelHasta)
         {

            float x=(float)res[i]/porcionImagen.length;
            frecuencias[i]=x; //para el grafico 
             tableImagenFiltrada.setValueAt(res[i], i, 1);
             tableImagenFiltrada.setValueAt(x, i, 2);
           //  float y=x*(nivelHasta-nivelDesde+1);
           //   tableImagenFiltrada.setValueAt(y, i, 3);
              //frecEcualizadas[i]=y;
            // tableImagenFiltrada.setValueAt(z+y, i, 4);
            
            // z+=y;
              NivelGris nivel=new NivelGris();
             nivel.setNivelGris(i);
             nivel.setFrecuencia(res[i]);
             nivel.setgPrevia(z);
             ecualizacion.add(nivel);
           }
         else
         { /*tableImagenFiltrada.setValueAt("-", i, 1);*/}

       }
        }
     //frecEcualizadas=his.calcularHistogramaEcualizado(ecualizacion,porcionImagen);
    //crearVectorFloat();
}//GEN-LAST:event_jButton1ActionPerformed

    private void radioButtonIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonIngresarActionPerformed
        // TODO add your handling code here:
        // radioButtonGenerar.setToolTipText("El tamaño de la imagen será 12X6");
        radioButtonIngresar.setToolTipText("El tamaño de la imagen puede ser menos a 12x6, si ingresa menos números");

         cleanTables();
         cleanTable();
            genero=false;
       
}//GEN-LAST:event_radioButtonIngresarActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:

        cleanTables();
        cleanTable();
        tableImagen.clearSelection();
        ecualizacion=new ArrayList<NivelGris>();
        comboHasta.setEnabled(true);
        genero=false;
        this.radioButtonGenerar.setEnabled(true);
        this.radioButtonIngresar.setEnabled(true);
}//GEN-LAST:event_btnVolverActionPerformed

    private void crearVectorFloat()
    {
        ecuali=new float[frecEcualizadas.length];
        for(int i=0;i<frecEcualizadas.length;i++)
        {
            ecuali[i]=(float)frecEcualizadas[i];
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(frecuencias!=null)
        {

           GraficoHistograma gh=new GraficoHistograma(parent,true,frecuencias,"histograma.jpg");
            gh.setVisible(true);
           
        }
        else
        {
          System.out.println("Genere la imagen");
        }
       

      /*  for(int i=0;i<frecEcualizadas.length;i++)
        {
           // NivelGris Nivel=(NivelGris)ecualizacion.get(i);
            System.out.println(frecEcualizadas[i]);

        }*/
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void radioButtonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonGenerarActionPerformed
        // TODO add your handling code here:

        generarNumeros();
        
}//GEN-LAST:event_radioButtonGenerarActionPerformed

    private void btnEcualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEcualizarActionPerformed
        // TODO add your handling code here:
        Ecualizacion ecuali=new Ecualizacion(parent,true,ecualizacion,nivelHasta,"");
        ecuali.setVisible(true);
    }//GEN-LAST:event_btnEcualizarActionPerformed


 




  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEcualizar;
    private javax.swing.JButton btnVolver;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox comboHasta;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton radioButtonGenerar;
    private javax.swing.JRadioButton radioButtonIngresar;
    private javax.swing.JTable tableImagen;
    private javax.swing.JTable tableImagenFiltrada;
    // End of variables declaration//GEN-END:variables
private int[] porcionImagen;
private int selectionColumn=0;
private int selectionRow=0;
private int nivelDesde=0;
private int nivelHasta=6;
private  Histograma his=new Histograma();
private Frame parent;
private float[] frecuencias;
private int[] frecEcualizadas;
private float[] ecuali;
private ArrayList<NivelGris> ecualizacion=new ArrayList<NivelGris>();
private boolean genero=false;


    private void generarNumeros()
    {
      for(int i=0;i<12;i++)
      {
      for(int j=0;j<6;j++)
      {
        int numero=(int) (Math.random() * (nivelHasta+1));
        tableImagen.setValueAt(numero, j, i);
        
      }

      }
    genero=true;
    }

 

 private void cleanTables()
    { 
    
     for(int i=0;i<12;i++)
      {
      for(int j=0;j<6;j++)
      {

        tableImagen.setValueAt(null, j, i);
       
      }

      }}


 private void cleanTable()
    {

     for(int i=1;i<3;i++)
      {
      for(int j=0;j<17;j++)
      {

        this.tableImagenFiltrada.setValueAt(null, j, i);

      }

      }}

private int[] cargarPorcionImagen()
    {
     // String columnSelected=(String)comboColumnas.getSelectedItem();
     // int columnFrom=Integer.parseInt(columnSelected);
    //  String rowSelected=(String)comboFilas.getSelectedItem();
     // int rowFrom=Integer.parseInt(rowSelected);
      ArrayList porImagen=new ArrayList();
      
          for (int i = 0; i < 6; i++)
          {
           for(int j=0;j<12;j++)
           {
             if(tableImagen.getValueAt(i, j)!=null)
                {
               int currentValue = Integer.parseInt(tableImagen.getValueAt(i,j).toString());
               porImagen.add(currentValue);
            
               }              
              }
           
           }
       crearArray(porImagen);
       return porcionImagen;

    }

 
private void crearArray(ArrayList a)
    {
      porcionImagen=new int[a.size()];
      for(int i=0;i<a.size();i++)
      {
         porcionImagen[i]=(Integer)a.get(i);
      }
    }


}
